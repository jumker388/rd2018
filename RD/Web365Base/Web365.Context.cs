//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web365Base
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities365 : DbContext
    {
        public Entities365()
            : base("name=Entities365")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblAdverties_Picture_Map> tblAdverties_Picture_Map { get; set; }
        public DbSet<tblAdvertise> tblAdvertise { get; set; }
        public DbSet<tblArticle> tblArticle { get; set; }
        public DbSet<tblArticleAuto> tblArticleAuto { get; set; }
        public DbSet<tblComment> tblComment { get; set; }
        public DbSet<tblContact> tblContact { get; set; }
        public DbSet<tblCustomer> tblCustomer { get; set; }
        public DbSet<tblDetail> tblDetail { get; set; }
        public DbSet<tblDistributor> tblDistributor { get; set; }
        public DbSet<tblDomain> tblDomain { get; set; }
        public DbSet<tblFile> tblFile { get; set; }
        public DbSet<tblGameConfigLogs> tblGameConfigLogs { get; set; }
        public DbSet<tblGameLogsDetail> tblGameLogsDetail { get; set; }
        public DbSet<tblGameLogsMoney> tblGameLogsMoney { get; set; }
        public DbSet<tblGoogleMessage> tblGoogleMessage { get; set; }
        public DbSet<tblGroup_Article_Map> tblGroup_Article_Map { get; set; }
        public DbSet<tblGroup_TypeArticle_Map> tblGroup_TypeArticle_Map { get; set; }
        public DbSet<tblGroupArticle> tblGroupArticle { get; set; }
        public DbSet<tblGroupTypeArticle> tblGroupTypeArticle { get; set; }
        public DbSet<tblLanguage> tblLanguage { get; set; }
        public DbSet<tblLayoutContent> tblLayoutContent { get; set; }
        public DbSet<tblManufacturer> tblManufacturer { get; set; }
        public DbSet<tblMenu> tblMenu { get; set; }
        public DbSet<tblOrder> tblOrder { get; set; }
        public DbSet<tblOrder_Shipping> tblOrder_Shipping { get; set; }
        public DbSet<tblOrder_Status> tblOrder_Status { get; set; }
        public DbSet<tblOrderDetail> tblOrderDetail { get; set; }
        public DbSet<tblPage> tblPage { get; set; }
        public DbSet<tblPicture> tblPicture { get; set; }
        public DbSet<tblProduct> tblProduct { get; set; }
        public DbSet<tblProduct_Attribute_Map> tblProduct_Attribute_Map { get; set; }
        public DbSet<tblProduct_Status_Map> tblProduct_Status_Map { get; set; }
        public DbSet<tblProduct_Variant> tblProduct_Variant { get; set; }
        public DbSet<tblProductAttribute> tblProductAttribute { get; set; }
        public DbSet<tblProductFilter> tblProductFilter { get; set; }
        public DbSet<tblProductGroupAttribute> tblProductGroupAttribute { get; set; }
        public DbSet<tblProductLabel> tblProductLabel { get; set; }
        public DbSet<tblProductStatus> tblProductStatus { get; set; }
        public DbSet<tblProductType_Group_Map> tblProductType_Group_Map { get; set; }
        public DbSet<tblProductTypeGroup> tblProductTypeGroup { get; set; }
        public DbSet<tblReceiveInfo> tblReceiveInfo { get; set; }
        public DbSet<tblReceiveInfoGroup> tblReceiveInfoGroup { get; set; }
        public DbSet<tblSupport> tblSupport { get; set; }
        public DbSet<tblTags> tblTags { get; set; }
        public DbSet<tblTags_Mapping_News> tblTags_Mapping_News { get; set; }
        public DbSet<tblTypeArticle> tblTypeArticle { get; set; }
        public DbSet<tblTypeComment> tblTypeComment { get; set; }
        public DbSet<tblTypeFile> tblTypeFile { get; set; }
        public DbSet<tblTypeLog> tblTypeLog { get; set; }
        public DbSet<tblTypePicture> tblTypePicture { get; set; }
        public DbSet<tblTypeProduct> tblTypeProduct { get; set; }
        public DbSet<tblTypeSupport> tblTypeSupport { get; set; }
        public DbSet<UserProfile> UserProfile { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<ReportSumMoney> ReportSumMoney { get; set; }
        public DbSet<ReportSumMoney2> ReportSumMoney2 { get; set; }
        public DbSet<ThongKePOC> ThongKePOC { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int PRC_InsertPageForRole(Nullable<int> roleId, Nullable<int> pageId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var pageIdParameter = pageId.HasValue ?
                new ObjectParameter("PageId", pageId) :
                new ObjectParameter("PageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_InsertPageForRole", roleIdParameter, pageIdParameter);
        }
    
        public virtual ObjectResult<PRC_GetMenu_Result> PRC_GetMenu(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_GetMenu_Result>("PRC_GetMenu", userIdParameter);
        }
    
        public virtual int PRC_InsertRoleForUser(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_InsertRoleForUser", userIdParameter, roleIdParameter);
        }
    
        public virtual int PRC_InsertFilterForProduct(Nullable<int> productId, Nullable<int> filterId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_InsertFilterForProduct", productIdParameter, filterIdParameter);
        }
    
        public virtual int PRC_InsertLabelForProduct(Nullable<int> productId, Nullable<int> labelId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var labelIdParameter = labelId.HasValue ?
                new ObjectParameter("LabelId", labelId) :
                new ObjectParameter("LabelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_InsertLabelForProduct", productIdParameter, labelIdParameter);
        }
    
        public virtual ObjectResult<PRC_AllChildTypeNews_Result> PRC_AllChildTypeNews(string categoryAscii)
        {
            var categoryAsciiParameter = categoryAscii != null ?
                new ObjectParameter("CategoryAscii", categoryAscii) :
                new ObjectParameter("CategoryAscii", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_AllChildTypeNews_Result>("PRC_AllChildTypeNews", categoryAsciiParameter);
        }
    
        public virtual ObjectResult<PRC_AllChildTypeNewsByArrID_Result> PRC_AllChildTypeNewsByArrID(string listID)
        {
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_AllChildTypeNewsByArrID_Result>("PRC_AllChildTypeNewsByArrID", listIDParameter);
        }
    
        public virtual int PRC_GetListNewsByType(Nullable<int> typeID, string typeAscii, Nullable<int> currentRecord, Nullable<int> pageSize, ObjectParameter total)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var typeAsciiParameter = typeAscii != null ?
                new ObjectParameter("TypeAscii", typeAscii) :
                new ObjectParameter("TypeAscii", typeof(string));
    
            var currentRecordParameter = currentRecord.HasValue ?
                new ObjectParameter("CurrentRecord", currentRecord) :
                new ObjectParameter("CurrentRecord", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_GetListNewsByType", typeIDParameter, typeAsciiParameter, currentRecordParameter, pageSizeParameter, total);
        }
    
        public virtual int PRC_Role_UpdateTestTypeForQuestion(Nullable<int> questionID, string listTestTypeID)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var listTestTypeIDParameter = listTestTypeID != null ?
                new ObjectParameter("ListTestTypeID", listTestTypeID) :
                new ObjectParameter("ListTestTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_Role_UpdateTestTypeForQuestion", questionIDParameter, listTestTypeIDParameter);
        }
    
        public virtual ObjectResult<PRC_MenuByParentId_Result> PRC_MenuByParentId(string listID)
        {
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_MenuByParentId_Result>("PRC_MenuByParentId", listIDParameter);
        }
    
        public virtual int PRC_ResetPictureProduct(Nullable<int> productID, string listID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_ResetPictureProduct", productIDParameter, listIDParameter);
        }
    
        public virtual int PRC_ResetPictureProductType(Nullable<int> typeID, string listID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_ResetPictureProductType", typeIDParameter, listIDParameter);
        }
    
        public virtual ObjectResult<PRC_Product_GetAllChildTypeByParentID_Result> PRC_Product_GetAllChildTypeByParentID(Nullable<int> parent)
        {
            var parentParameter = parent.HasValue ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_Product_GetAllChildTypeByParentID_Result>("PRC_Product_GetAllChildTypeByParentID", parentParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual int sp_alterdiagram2(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram2", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram2(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram2", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition2_Result> sp_helpdiagramdefinition2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition2_Result>("sp_helpdiagramdefinition2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams2_Result> sp_helpdiagrams2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams2_Result>("sp_helpdiagrams2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram2(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram2", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams2");
        }
    
        public virtual ObjectResult<PRC_GetListNewsSearch_Result> PRC_GetListNewsSearch(string keyword, Nullable<int> currentRecord, Nullable<int> pageSize, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var currentRecordParameter = currentRecord.HasValue ?
                new ObjectParameter("CurrentRecord", currentRecord) :
                new ObjectParameter("CurrentRecord", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_GetListNewsSearch_Result>("PRC_GetListNewsSearch", keywordParameter, currentRecordParameter, pageSizeParameter, total);
        }
    
        public virtual int sp_alterdiagram3(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram3", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram3(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram3", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram3(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram3", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition3_Result> sp_helpdiagramdefinition3(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition3_Result>("sp_helpdiagramdefinition3", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams3_Result> sp_helpdiagrams3(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams3_Result>("sp_helpdiagrams3", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram3(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram3", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams3");
        }
    
        public virtual int sp_alterdiagram4(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram4", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram4(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram4", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram4(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram4", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition4_Result> sp_helpdiagramdefinition4(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition4_Result>("sp_helpdiagramdefinition4", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams4_Result> sp_helpdiagrams4(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams4_Result>("sp_helpdiagrams4", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram4(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram4", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams4()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams4");
        }
    
        public virtual ObjectResult<Nullable<int>> PRC_GetProducts(string keyword, string color, string sort, Nullable<int> page, Nullable<int> pageSize)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("sort", sort) :
                new ObjectParameter("sort", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PRC_GetProducts", keywordParameter, colorParameter, sortParameter, pageParameter, pageSizeParameter);
        }
    
        public virtual int PRC_ResetPictureProductVariant(Nullable<int> productID, string listID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_ResetPictureProductVariant", productIDParameter, listIDParameter);
        }
    
        public virtual ObjectResult<PRC_CheckUserInMember_Result> PRC_CheckUserInMember(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_CheckUserInMember_Result>("PRC_CheckUserInMember", userNameParameter);
        }
    
        public virtual ObjectResult<PRC_GetDetailPlayer_Result> PRC_GetDetailPlayer(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_GetDetailPlayer_Result>("PRC_GetDetailPlayer", userNameParameter);
        }
    
        public virtual int PRC_GetLogsMoneyByUserName(string userName, Nullable<int> type, Nullable<int> currentPage, Nullable<int> pageSize, string key, Nullable<int> statusId, string fDate, string tDate, ObjectParameter total)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("currentPage", currentPage) :
                new ObjectParameter("currentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("fDate", fDate) :
                new ObjectParameter("fDate", typeof(string));
    
            var tDateParameter = tDate != null ?
                new ObjectParameter("tDate", tDate) :
                new ObjectParameter("tDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_GetLogsMoneyByUserName", userNameParameter, typeParameter, currentPageParameter, pageSizeParameter, keyParameter, statusIdParameter, fDateParameter, tDateParameter, total);
        }
    
        public virtual int PRC_InsertLogsGame(string userSend, string userRecive, Nullable<double> moneySend, Nullable<double> moneyRecive, Nullable<double> tax, Nullable<double> taxParent, Nullable<int> statusId, string note, Nullable<double> taxmoney, Nullable<double> taxParentMoney, Nullable<double> taxSystem, Nullable<double> taxSystemMoney)
        {
            var userSendParameter = userSend != null ?
                new ObjectParameter("userSend", userSend) :
                new ObjectParameter("userSend", typeof(string));
    
            var userReciveParameter = userRecive != null ?
                new ObjectParameter("userRecive", userRecive) :
                new ObjectParameter("userRecive", typeof(string));
    
            var moneySendParameter = moneySend.HasValue ?
                new ObjectParameter("moneySend", moneySend) :
                new ObjectParameter("moneySend", typeof(double));
    
            var moneyReciveParameter = moneyRecive.HasValue ?
                new ObjectParameter("moneyRecive", moneyRecive) :
                new ObjectParameter("moneyRecive", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("tax", tax) :
                new ObjectParameter("tax", typeof(double));
    
            var taxParentParameter = taxParent.HasValue ?
                new ObjectParameter("taxParent", taxParent) :
                new ObjectParameter("taxParent", typeof(double));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var taxmoneyParameter = taxmoney.HasValue ?
                new ObjectParameter("taxmoney", taxmoney) :
                new ObjectParameter("taxmoney", typeof(double));
    
            var taxParentMoneyParameter = taxParentMoney.HasValue ?
                new ObjectParameter("taxParentMoney", taxParentMoney) :
                new ObjectParameter("taxParentMoney", typeof(double));
    
            var taxSystemParameter = taxSystem.HasValue ?
                new ObjectParameter("taxSystem", taxSystem) :
                new ObjectParameter("taxSystem", typeof(double));
    
            var taxSystemMoneyParameter = taxSystemMoney.HasValue ?
                new ObjectParameter("taxSystemMoney", taxSystemMoney) :
                new ObjectParameter("taxSystemMoney", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_InsertLogsGame", userSendParameter, userReciveParameter, moneySendParameter, moneyReciveParameter, taxParameter, taxParentParameter, statusIdParameter, noteParameter, taxmoneyParameter, taxParentMoneyParameter, taxSystemParameter, taxSystemMoneyParameter);
        }
    
        public virtual ObjectResult<PRC_PortalUser_Result> PRC_PortalUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRC_PortalUser_Result>("PRC_PortalUser", userNameParameter);
        }
    
        public virtual int PRC_UpdateLogsGameDetail(Nullable<int> logDetailId, Nullable<int> statusId, string note)
        {
            var logDetailIdParameter = logDetailId.HasValue ?
                new ObjectParameter("logDetailId", logDetailId) :
                new ObjectParameter("logDetailId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRC_UpdateLogsGameDetail", logDetailIdParameter, statusIdParameter, noteParameter);
        }
    }
}
